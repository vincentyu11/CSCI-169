1. (5 points) In Scala, write a recursive function that implements Euclid’s method for finding the greatest common divisor of two positive numbers, as given below.

2. (5 points)  In Scala, write a more general version of the sum_fun function called apply_combine that applies a function f(taken as a parameter) to the integers from 1 to x(taken as a parameter), then combines those values using another function g(taken as a parameter).  So combine takes in three parameters: a function f that takes in an Int and returns an Int, an Int x, and a function g that takes in two Ints and returns an Int.  It then returns the result of using the function g to combine the values gained by applying f to 1, 2, …, x. 

3. (10 points) Write a curried version of the function from problem 2.   Since this function takes three parameters, we're going to do two steps of currying.  This function, apply_combine2, takes in one parameter, the function f:Int=>Int.  apply_combine2 then returns a function that takes in one Int parameter, and returns yet another function which in turn takes in a function g:(Int, Int)=>Int and returns the same Int value as apply_combine.  It’s up to you whether you wish to use named or anonymous functions.
